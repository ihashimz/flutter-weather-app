// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_weather_app/test/features/weather/presentation/pages/weather_home_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:flutter_weather_app/core/errors/failures.dart' as _i10;
import 'package:flutter_weather_app/core/services/location_service.dart' as _i9;
import 'package:flutter_weather_app/features/weather/domain/usecases/get_current_weather.dart'
    as _i2;
import 'package:flutter_weather_app/features/weather/presentation/bloc/weather_bloc.dart'
    as _i5;
import 'package:flutter_weather_app/features/weather/presentation/bloc/weather_event.dart'
    as _i7;
import 'package:flutter_weather_app/features/weather/presentation/bloc/weather_state.dart'
    as _i3;
import 'package:geolocator/geolocator.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetCurrentWeather_0 extends _i1.SmartFake
    implements _i2.GetCurrentWeather {
  _FakeGetCurrentWeather_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherState_1 extends _i1.SmartFake implements _i3.WeatherState {
  _FakeWeatherState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherBloc extends _i1.Mock implements _i5.WeatherBloc {
  MockWeatherBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetCurrentWeather get getCurrentWeather => (super.noSuchMethod(
        Invocation.getter(#getCurrentWeather),
        returnValue: _FakeGetCurrentWeather_0(
          this,
          Invocation.getter(#getCurrentWeather),
        ),
      ) as _i2.GetCurrentWeather);

  @override
  _i3.WeatherState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeWeatherState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.WeatherState);

  @override
  _i6.Stream<_i3.WeatherState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i3.WeatherState>.empty(),
      ) as _i6.Stream<_i3.WeatherState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i7.WeatherEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i7.WeatherEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.WeatherState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i7.WeatherEvent>(
    _i8.EventHandler<E, _i3.WeatherState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i8.Transition<_i7.WeatherEvent, _i3.WeatherState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void onChange(_i8.Change<_i3.WeatherState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i9.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Either<_i10.Failure, _i11.Position>> getCurrentLocation() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<_i10.Failure, _i11.Position>>.value(
            _FakeEither_2<_i10.Failure, _i11.Position>(
          this,
          Invocation.method(
            #getCurrentLocation,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i10.Failure, _i11.Position>>);

  @override
  _i6.Future<_i4.Either<_i10.Failure, bool>> requestLocationPermission() =>
      (super.noSuchMethod(
        Invocation.method(
          #requestLocationPermission,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<_i10.Failure, bool>>.value(
            _FakeEither_2<_i10.Failure, bool>(
          this,
          Invocation.method(
            #requestLocationPermission,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i10.Failure, bool>>);

  @override
  _i6.Future<bool> isLocationPermissionGranted() => (super.noSuchMethod(
        Invocation.method(
          #isLocationPermissionGranted,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> shouldShowPermissionRequest() => (super.noSuchMethod(
        Invocation.method(
          #shouldShowPermissionRequest,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}
